#!/usr/bin/env luajit

-- just the type of tomfoolery cowlark has on his 404 pages
-- except with input for babies..
--
-- comotion, 2017-01-01

local Mrg = require('mrg')
local os = require('os')
local math = require('math')
local mrg = Mrg.new(-1,-1)

local width=16
local height=9
local scale = width * height

local screen = {}

-- 16-bit color
-- #argb -> r, g, b, a
function color_to_apoint(color)
  b = color % 0x10
  g = math.floor(((color % 0x100) - b) / 16)
  r = math.floor(((color % 0x1000 - g) / 16 - b) / 16)
  --a = math.floor(((color%65536) - (r * 256) - (g *16) - b)/4096)
  return r, g, b, 15
end

function color_to_point(color)
  r, g, b, a = color_to_apoint(color)
  r = r / 15
  g = g / 15
  b = b / 15
  a = a / 15
  return r, g, b, a
end

function reset()
  for x = 1, width do
    screen[x] = {}
    for y = 1, height do
      screen[x][y] = 0
    end
  end
end

local RETIME = 200
local ink = 0x000
local selink = 0x101
local px, py, pc = 0, 0, 0

function timeout()
  currentink = ink
  curx, cury =  math.ceil(mrg:pointer_x()/mrg:width()*width), math.ceil(mrg:pointer_y()/mrg:height()*height)
  for x = 1, width do
    for y = 1, height do
      if curx == x and cury == y then
        if pc ~= 0 then screen[px][py] = pc end
        px, py, pc = x, y, screen[x][y]
        screen[x][y] = selink
      else
        screen[x][y] = (screen[x][y]*scale + currentink) / scale
        --screen[x][y] = currentink / scale
      end
      currentink = currentink + 10
    end
  end
  ink = ink + 1 % 0xfff
  print("ink:", ink)
  mrg:queue_draw(nil)
  mrg:add_timeout(RETIME, timeout)
  return 0
end
mrg:add_timeout(RETIME, timeout)

reset()

function toggle_fullscreen(event)
  event.mrg:set_fullscreen(not event.mrg:is_fullscreen()) 
end

mrg:set_ui(function()
  local cr = mrg:cr()
  dim = mrg:width()
  if dim > mrg:height() then dim = mrg:height() end

  --cr:translate((mrg:width()-dim)/2, (mrg:height()-dim)/2)

  cr:save()
  cr:scale(mrg:width(), mrg:height())

  cr:set_source_rgb(0.2, 0.2, 0.2)
  cr:paint()

  for x = 1, width do
    for y = 1, height do
      --print("color: " ..screen[x][y], color_to_point(screen[x][y]))

      cr:set_source_rgba(color_to_point(screen[x][y]))
      cr:rectangle(1.0/width * (x-1), 1.0/height *(y-1), 1.0/width, 1.0/height)
      mrg:listen(Mrg.PRESS, function(ev)
        screen[x][y] = 1.0 - screen[x][y]
        mrg:queue_draw(nil)
        print("got event", x, y)
      end)
      cr:fill()
    end
  end
  
  -- draw grid lines
  if draw_grid then
    cr:set_source_rgba(0,0,0, 0.8)
    cr:set_line_width(1.0 / 3000)
    for x = 0, width do
      cr:move_to(1.0/width * x, 0)
      cr:line_to(1.0/width * x, 1)
      cr:stroke()
    end
    for y = 0, height do
      cr:move_to(0, 1.0/height * y)
      cr:line_to(1, 1.0/height * y)
      cr:stroke()
    end
  end

  cr:restore()

  mrg:add_binding("control-q", NULL, NULL, function () mrg:quit() end)
  mrg:add_binding("q", NULL, NULL,         function () mrg:quit() end)
  mrg:add_binding("escape", NULL, NULL,    function () mrg:quit() end)
  mrg:add_binding("f", NULL, NULL,   toggle_fullscreen)
  mrg:add_binding("F11", NULL, NULL, toggle_fullscreen)
end)

mrg:add_timeout(100, timeout)
mrg:set_title('404')
mrg:main()


